syntax = "proto3";

package com.github.dcysteine.nesql.exporter.proto;

option java_multiple_files = true;

import "fluid_proto.proto";
import "item_proto.proto";

// Message that encodes all of the needed information to uniquely identify a recipe.
// We will serialize this message and use that as the primary key for the recipe table.
//
// For the ingredient lists in this message, add an empty Item or Fluid message (equal to default
// instance) to indicate an empty spot. This is used for shaped recipes that have gaps.
message RecipePb {
  int32 recipe_type = 1;
  repeated ItemGroupPb item_input = 2;
  repeated FluidGroupPb fluid_input = 3;
  repeated ItemStackPb item_output = 4;
  repeated FluidStackPb fluid_output = 5;
}